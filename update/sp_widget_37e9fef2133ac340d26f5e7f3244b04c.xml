<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function ($scope, $http, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil) {
	var c = this;
	
	if(c.data.redirect_url) {
		$window.location = $scope.data.redirect_url;
	}
	
	c.quantity = 1;
	if ($scope.data.sc_cat_item)
		$scope.data.sc_cat_item.description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
	c.widget._debugContextMenu = [
		[ i18n.getMessage("Open") + " sc_cat_item", function(){
			var item = c.data.sc_cat_item;
			$window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id); }]
	];
	c.showAddCartBtn = function() {
		return c.options.show_add_cart_button &&
			c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			!c.data.sc_cat_item.no_cart;
	}

	c.showQuantitySelector = function() {
		return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			!c.data.sc_cat_item.no_quantity &&
			(!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
	}

	c.showOrderNowButton = function() {
		return c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now;
	}

	c.allowOrder = function() {
		if (c.data.sc_cat_item.use_sc_layout)
			return true;

		if (c.data.sc_cat_item.no_order)
			return false;

		if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart)
			return false;

		return true;
	}

	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});

	$scope.m = $scope.data.msgs;
	$scope.submitButtonMsg = $scope.m.submitMsg;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	function appendError(error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	}
	ah.setParams('sp_portal', $scope.data._attachmentGUID, 1024 * 1024 * 24);
	function setAttachments(attachments, action) {
		$scope.attachments = attachments;
		if (action === "added")
			$scope.setFocusToAttachment();
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted")
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
	}
	$scope.attachmentHandler.getAttachmentList();

	$scope.confirmDeleteAttachment = function(attachment, $event) {
    $rootScope.$broadcast("dialog.delete_attachment.show", {
      parms: {
        ok: function() {
          $scope.attachmentHandler.deleteAttachment(attachment);
          $rootScope.$broadcast("dialog.delete_attachment.close");
        },
        cancel: function() {
          $rootScope.$broadcast("dialog.delete_attachment.close");
        },
        details: attachment.name
      }
    })
  }

	// Breadcrumbs
	if ($scope.data.sc_cat_item) {
		/*var bc = [{label: 'Get Services', url: '?id=' + $scope.data.murl}];
		if ($scope.data.category)
			bc[bc.length] = {label: $scope.data.category.name, url: $scope.data.category.url};*/
		var bc = $scope.data.bcs;
		
		if ($scope.data.category)
			bc[bc.length] = {label: $scope.data.category.name, url: $scope.data.category.url};

		bc[bc.length] = {label: $scope.data.sc_cat_item.name, url: '#'};
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', bc);
		});
		spUtil.setSearchPage('sc');
	} else {
		var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', notFoundBC);
		});
		spUtil.setSearchPage('sc');
	}

	var g_form;
	$scope.$on('spModel.gForm.initialized', function(e, gFormInstance){
		g_form = gFormInstance;

		// This runs after all onSubmit scripts have executed
		g_form.$private.events.on('submitted', function(){
			if ($scope.data.sc_cat_item.item_action === "order")
				getOne();
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				addToCart();
		});
	});

	$scope.triggerAddToCart = function() {
		$scope.data.sc_cat_item.item_action = "add_to_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		if (g_form) {
			g_form.submit();
		}
	}

	$scope.triggerOnSubmit = function(){
		$scope.data.sc_cat_item.item_action = "order";
		$scope.data.sc_cat_item.quantity = c.quantity;
		if (g_form)
			g_form.submit();
	}

	// order / create request
	function getOne() {
		postCatalogFormRequest().success(function(response) {
			var a = response.result ? response.result : response.answer;
			var n = a.number;
			$scope.$emit("$$uiNotification", a.$$uiNotification);
			$scope.$emit("$sp.sc_cat_item.submitted", a);
			if (n) {// redirect to my stuff page 
				issueMessage(n, a.table, a.sys_id, a.redirect_to, '/servicehub/?id=ucd_my_stuff&stuff=sc_req_item&filter=open');
				//issueMessage(n, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);
			}
			$scope.submitting = false;
			$scope.submitButtonMsg = $scope.m.submittedMsg;
		}).error(function(response) {
			console.log(response);
		});
	}

	function addToCart() {
		postCatalogFormRequest().success(function(response) {
			$rootScope.$broadcast("$sp.service_catalog.cart.add_item");
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
			//spUtil.addInfoMessage("Added item to shopping cart");
			$scope.submitting = false;
			c.status = "Added item to shopping cart";
		});
	}

	function postCatalogFormRequest() {
		setFieldsReadonly();
		$scope.submitted = true;
		$scope.submitting = true;
		var requestUrl;
		var reqData = {};
 		if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") {
			requestUrl = '/api/sn_sc/v1/servicecatalog/items/' + $scope.data.sc_cat_item.sys_id + '/submit_producer';
			for(var obj in $scope.data.sc_cat_item._fields)
				reqData[$scope.data.sc_cat_item._fields[obj].variable_name] = $scope.data.sc_cat_item._fields[obj].value;
			reqData = {'variables' : reqData, 'attachment_id' : $scope.data._attachmentGUID, 'attachment_table': 'sp_portal', 'get_portal_messages': 'true'};
		}
		else {
			requestUrl = spUtil.getURL('sc_cat_item');
			reqData = $scope.data.sc_cat_item;
			reqData._attachmentGUID = $scope.data._attachmentGUID;
		}
		return $http.post(requestUrl, reqData);
	}

	// spModel populates mandatory - hasMandatory is called by the submit button
	$scope.hasMandatory = function(mandatory) {
		return mandatory && mandatory.length > 0;
	};

	// switch catalog items
	var unregister = $scope.$on('$sp.list.click', onListClick);
	$scope.$on("$destroy", function() {
		unregister();
	});

	function onListClick(evt, arg) {
		$scope.data.sys_id = arg.sys_id;
		spUtil.update($scope);
	}

	function setFieldsReadonly(){
		var allFields = g_form.getFieldNames();
		for(var fieldName in allFields){
			g_form.setReadOnly(allFields[fieldName], true);
		}
	}

	function issueMessage(n, table, sys_id, redirectTo, redirectUrl) {
		var page = table == 'sc_request' ? 'sc_request' : 'ticket';
		if (c.options.page) {page = c.options.page;}
		if (c.options.table) {table = c.options.table;}
		if (redirectTo == 'catalog_home') page = 'sc_home';
		var url = spUtil.format(c.options.url, {page: page, table: table, sys_id: sys_id});
		if (c.options.auto_redirect == "true") {
			if (redirectUrl)
				$window.location.href = redirectUrl;
			else
			$window.location.href = url;
			return;
		}

		/*var t = $scope.m.createdMsg + " " + n + " - ";
		t += $scope.m.trackMsg;
		t += ' <a href="' + url + '">' + $scope.m.clickMsg + '</a>';*/
		var t = "Thank you. Your request has been submitted.";
		$timeout( function(){
			spUtil.addInfoMessage(t);}, 3000 
		);
	}
}

/** Pre-breadcrumb update to remove Get Services
function ($scope, $http, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil) {
	var c = this;
	c.quantity = 1;
	if ($scope.data.sc_cat_item)
		$scope.data.sc_cat_item.description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
	c.widget._debugContextMenu = [
		[ i18n.getMessage("Open") + " sc_cat_item", function(){
			var item = c.data.sc_cat_item;
			$window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id); }]
	];
	c.showAddCartBtn = function() {
		return c.options.show_add_cart_button &&
			c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			!c.data.sc_cat_item.no_cart;
	}

	c.showQuantitySelector = function() {
		return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
			!c.data.sc_cat_item.no_quantity &&
			(!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
	}

	c.showOrderNowButton = function() {
		return c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now;
	}

	c.allowOrder = function() {
		if (c.data.sc_cat_item.use_sc_layout)
			return true;

		if (c.data.sc_cat_item.no_order)
			return false;

		if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart)
			return false;

		return true;
	}

	$scope.$on('dialog.upload_too_large.show', function(e){
		$log.error($scope.m.largeAttachmentMsg);
		spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
	});

	$scope.m = $scope.data.msgs;
	$scope.submitButtonMsg = $scope.m.submitMsg;
	var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	function appendError(error) {
		spUtil.addErrorMessage(error.msg + error.fileName);
	}
	ah.setParams('sp_portal', $scope.data._attachmentGUID, 1024 * 1024 * 24);
	function setAttachments(attachments, action) {
		$scope.attachments = attachments;
		if (action === "added")
			$scope.setFocusToAttachment();
		if (action === "renamed")
			spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
		if (action === "deleted")
			spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
	}
	$scope.attachmentHandler.getAttachmentList();

	$scope.confirmDeleteAttachment = function(attachment, $event) {
    $rootScope.$broadcast("dialog.delete_attachment.show", {
      parms: {
        ok: function() {
          $scope.attachmentHandler.deleteAttachment(attachment);
          $rootScope.$broadcast("dialog.delete_attachment.close");
        },
        cancel: function() {
          $rootScope.$broadcast("dialog.delete_attachment.close");
        },
        details: attachment.name
      }
    })
  }

	// Breadcrumbs
	if ($scope.data.sc_cat_item) {
		var bc = [{label: 'Get Services', url: '?id=' + $scope.data.murl}];
		if ($scope.data.category)
			bc[bc.length] = {label: $scope.data.category.name, url: $scope.data.category.url};

		bc[bc.length] = {label: $scope.data.sc_cat_item.name, url: '#'};
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', bc);
		});
		spUtil.setSearchPage('sc');
	} else {
		var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', notFoundBC);
		});
		spUtil.setSearchPage('sc');
	}

	var g_form;
	$scope.$on('spModel.gForm.initialized', function(e, gFormInstance){
		g_form = gFormInstance;

		// This runs after all onSubmit scripts have executed
		g_form.$private.events.on('submitted', function(){
			if ($scope.data.sc_cat_item.item_action === "order")
				getOne();
			else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
				addToCart();
		});
	});

	$scope.triggerAddToCart = function() {
		$scope.data.sc_cat_item.item_action = "add_to_cart";
		$scope.data.sc_cat_item.quantity = c.quantity;
		if (g_form)
			g_form.submit();
	}

	$scope.triggerOnSubmit = function(){
		$scope.data.sc_cat_item.item_action = "order";
		$scope.data.sc_cat_item.quantity = c.quantity;
		if (g_form)
			g_form.submit();
	}

	// order / create request
	function getOne() {
		postCatalogFormRequest().success(function(response) {
			var a = response.result ? response.result : response.answer;
			var n = a.number;
			$scope.$emit("$$uiNotification", a.$$uiNotification);
			$scope.$emit("$sp.sc_cat_item.submitted", a);
			if (n) // redirect to my stuff page
				issueMessage(n, a.table, a.sys_id, a.redirect_to, '/servicehub/?id=ucd_my_stuff');
				//issueMessage(n, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);
			$scope.submitting = false;
			$scope.submitButtonMsg = $scope.m.submittedMsg;
		}).error(function(response) {
			console.log(response);
		});
	}

	function addToCart() {
		postCatalogFormRequest().success(function(response) {
			$rootScope.$broadcast("$sp.service_catalog.cart.add_item");
			$rootScope.$broadcast("$sp.service_catalog.cart.update");
			//spUtil.addInfoMessage("Added item to shopping cart");
			$scope.submitting = false;
			c.status = "Added item to shopping cart";
		});
	}

	function postCatalogFormRequest() {
		setFieldsReadonly();
		$scope.submitted = true;
		$scope.submitting = true;
		var requestUrl;
		var reqData = {};
 		if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") {
			requestUrl = '/api/sn_sc/v1/servicecatalog/items/' + $scope.data.sc_cat_item.sys_id + '/submit_producer';
			for(var obj in $scope.data.sc_cat_item._fields)
				reqData[$scope.data.sc_cat_item._fields[obj].variable_name] = $scope.data.sc_cat_item._fields[obj].value;
			reqData = {'variables' : reqData, 'attachment_id' : $scope.data._attachmentGUID, 'attachment_table': 'sp_portal', 'get_portal_messages': 'true'};
		}
		else {
			requestUrl = spUtil.getURL('sc_cat_item');
			reqData = $scope.data.sc_cat_item;
			reqData._attachmentGUID = $scope.data._attachmentGUID;
		}
		return $http.post(requestUrl, reqData);
	}

	// spModel populates mandatory - hasMandatory is called by the submit button
	$scope.hasMandatory = function(mandatory) {
		return mandatory && mandatory.length > 0;
	};

	// switch catalog items
	var unregister = $scope.$on('$sp.list.click', onListClick);
	$scope.$on("$destroy", function() {
		unregister();
	});

	function onListClick(evt, arg) {
		$scope.data.sys_id = arg.sys_id;
		spUtil.update($scope);
	}

	function setFieldsReadonly(){
		var allFields = g_form.getFieldNames();
		for(var fieldName in allFields){
			g_form.setReadOnly(allFields[fieldName], true);
		}
	}

	function issueMessage(n, table, sys_id, redirectTo, redirectUrl) {
		var page = table == 'sc_request' ? 'sc_request' : 'ticket';
		if (c.options.page) {page = c.options.page;}
		if (c.options.table) {table = c.options.table;}
		if (redirectTo == 'catalog_home') page = 'sc_home';
		var url = spUtil.format(c.options.url, {page: page, table: table, sys_id: sys_id});
		if (c.options.auto_redirect == "true") {
			if (redirectUrl)
				$window.location.href = redirectUrl;
			else
			$window.location.href = url;
			return;
		}

		var t = $scope.m.createdMsg + " " + n + " - ";
		t += $scope.m.trackMsg;
		t += ' <a href="' + url + '">' + $scope.m.clickMsg + '</a>';
		spUtil.addInfoMessage(t);
	}
}
**/]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-button {
  float: none;
}

.sp-attachment-add {
  padding: 5px;
}

.p-t-none {
  padding-top: 0 !important;
}

.file-list-wrap {
	margin-bottom: 10px;
}

.quantity-selector {
  display: inline-block;
  width: 65px;
  padding-top: 2px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>ucd-sc-cat-item-breadcrumbs</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elem){
    scope.setFocusToAttachment = function () {
		setTimeout(function () {
			var inboxArray = elem.find("a.view-attachment");
			inboxArray.focus();
		}, 100);
	}
}
	]]></link>
        <name>UCD SC Catalog Item with Breadcrumbs    </name>
        <option_schema>[{"name":"show_add_cart_button","label":"Show Add Cart Button","type":"boolean"},{"hint":"Define a URL Format for successful order page","name":"url","label":"Custom URL Format","type":"string"},{"displayValue":"Page","name":"page","label":"Successful Order Page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"displayValue":"Table","name":"table","label":"Successful Order Table","type":"reference","value":"sys_db_object","ed":{"reference":"sys_db_object"}},{"hint":"Enable auto-redirection after ordering an item","name":"auto_redirect","label":"Auto Redirect on Successful Order","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[// populate the 'data' variable with catalog item, variables, and variable view
(function() {
	// portal can specify a catalog and catalog category home page
	data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "ucd_services";
	//data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "ucd_view_service_sp";
	data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "ucd_view_service2";
    data.sc_catalog = $sp.getValue('sc_catalog');
	data.services = "93056219134143003527bd122244b024";
	data.murl = "ucd_services&ucd_catalog="+data.sc_catalog+"&ucd_category_id="+data.services;
	
	
	options.show_add_cart_button = (options.show_add_cart_button == "true");

	if (options.page) {
		var pageGR = new GlideRecord("sp_page");
		options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null;
	}

	if (options.table) {
		var tableGR = new GlideRecord("sys_db_object");
		options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null;
	}

	options.url = options.url || "?id={page}&table={table}&sys_id={sys_id}";
	data.showPrices = $sp.showCatalogPrices();
	var m = data.msgs = {};
	m.submitMsg = gs.getMessage("Submit");
	m.submittedMsg = gs.getMessage("Submitted");
	m.createdMsg = gs.getMessage("Created");
	m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
	m.clickMsg = gs.getMessage("click here to view");
	m.dialogTitle = gs.getMessage("Delete Attachment");
	m.dialogMessage = gs.getMessage("Are you sure?");
	m.dialogOK = gs.getMessage("OK");
	m.dialogCancel = gs.getMessage("Cancel");
	m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "24MB");
	m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully");
	m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully");

	if (input)
		data.sys_id = input.sys_id;
	else if (options.sys_id)
		data.sys_id = options.sys_id;
	else
		data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');
	
	if (!data.sys_id)
		return;

	data._attachmentGUID = gs.generateGUID();
	var validatedItem = new sn_sc.CatItem('' + data.sys_id);
	if (!validatedItem.canView()){
		var grGetDeadItem = new GlideRecord('sc_cat_item');
		grGetDeadItem.get(data.sys_id);
		if (grGetDeadItem.workflow != '9f80f730c30311003d2ae219cdba8f7b') return; //item designer workflow

		var grFindActiveID = new GlideRecord('sc_ic_item_staging');
		grFindActiveID.addQuery('name', grGetDeadItem.name);
		grFindActiveID.addQuery('sc_catalogs', grGetDeadItem.sc_catalogs);
		grFindActiveID.addQuery('sc_categories', grGetDeadItem.category);
		grFindActiveID.addQuery('state', 'published');
		grFindActiveID.addActiveQuery();
		grFindActiveID.query();
		if (grFindActiveID.next()){
			data.redirect_url = "?id=ucd_cat_item&sys_id=" + grFindActiveID.sc_cat_item;
		}
		return;
	}

	data.sc_cat_item = $sp.getCatalogItem(data.sys_id, true);
	
	data.bcs = [];
	
	if (data.sc_cat_item.sys_class_name == 'pc_software_cat_item'){
		data.pc_software_cat_item = {};
		//data.pc_software_cat_item.test = 'hello!';
		
		var grpcsci = new GlideRecord('pc_software_cat_item');
		grpcsci.get(data.sys_id);
		
		data.pc_software_cat_item.specs = grpcsci.specs.toString().replace(/\n/g,"</br>");
		data.pc_software_cat_item.features = grpcsci.features.toString().replace(/\n/g,"</br>");
		data.pc_software_cat_item.u_technical_support = grpcsci.u_technical_support.toString().replace(/\n/g,"</br>");
		data.pc_software_cat_item.u_system_requirements = grpcsci.u_system_requirements.toString().replace(/\n/g,"<br>");
		data.pc_software_cat_item.vendor = grpcsci.vendor.getDisplayValue();
		data.pc_software_cat_item.u_available_for_home_use = 'No';
		if (grpcsci.u_available_for_home_use == 'true') data.pc_software_cat_item.u_available_for_home_use = 'Yes';
	}

	if (data.sc_cat_item.category) {
		
		var brcs = getAllParents(data.sc_cat_item.category);

		// add parents of current category to breadcrumb
		for(i=brcs.length-1;i>=0;i--){
			if(i==brcs.length-1) { // Catalog breadcrumb
				var categoryBc = getBreads(brcs[i]);
		
				data.bcs.push({label: categoryBc.label + " Catalog", url: "?id=ucd_services&ucd_catalog="+data.sc_catalog+"&ucd_category_id="+categoryBc.id});
			} else {
				data.bcs.push(getBreads(brcs[i]));
			}
		} 
		
		var categoryJS = new sn_sc.CatCategory(data.sc_cat_item.category);
		data.category = {
			name: categoryJS.getTitle(),
			url: '?id='+data.sc_category_page+'&sys_id=' + data.sc_cat_item.category+'&ucd_catalog='+ data.sc_catalog
		}
	} else { // no category
		data.bcs.push({label: "Request Services", url: "?id=ucd_services"});
	}

	$sp.logStat('Catalog View', data.sc_cat_item.sys_class_name, data.sys_id, data.sc_cat_item.name);
		
	function getAllParents(categorySysId) {
		var result = [];
		var sc = new GlideRecord('sc_category');
		if(sc.get(categorySysId)) {
			var parent = sc.getValue('parent');
			if(parent) {
				result.push(parent);
			}
			result = _.uniq(_.union(result, getAllParents(sc.getValue('parent'))));
		}
		return result;
	}
	
	function getBreads(sid) {
		var bc = {};
		var scname = new GlideRecord('sc_category');
		if(scname.get(sid)) {
			bc.label =   scname.getValue('title');     
			//bc.url   =   "?id=ucd_view_service_sp&ucd_catalog="+data.sc_catalog+"&sys_id="+scname.getValue('sys_id');
			bc.url   =   "?id=ucd_view_service2&ucd_catalog="+data.sc_catalog+"&sys_id="+scname.getValue('sys_id');  
			bc.id = scname.sys_id;
		}
		return bc;
	}
})()]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>kloves-alxcrlsn</sys_created_by>
        <sys_created_on>2017-12-06 21:42:09</sys_created_on>
        <sys_id>37e9fef2133ac340d26f5e7f3244b04c</sys_id>
        <sys_mod_count>188</sys_mod_count>
        <sys_name>UCD SC Catalog Item with Breadcrumbs    </sys_name>
        <sys_package display_value="UCD Portal Demo" source="x_uocd2_ucd_portal">c2fa136f139176003527bd122244b0f5</sys_package>
        <sys_policy/>
        <sys_scope display_value="UCD Portal Demo">c2fa136f139176003527bd122244b0f5</sys_scope>
        <sys_update_name>sp_widget_37e9fef2133ac340d26f5e7f3244b04c</sys_update_name>
        <sys_updated_by>admin-eduque</sys_updated_by>
        <sys_updated_on>2018-06-20 00:44:21</sys_updated_on>
        <template><![CDATA[<div id="sc_cat_item">
    <div class="row" ng-if="::data.sc_cat_item">
        <div ng-if="::data.sc_cat_item.picture" class="col-sm-3">
            <div class="panel panel-{{::options.color}} b wrapper-lg text-center">
                <img class="img-responsive catalog-item-image" alt="{{::data.sc_cat_item.name}}" style="display: inline" ng-src="{{::data.sc_cat_item.picture}}" />
            </div>
        </div>
        <div ng-class="{true:'col-sm-9',false:'col-sm-12'}[data.sc_cat_item.picture.length > 0]">
            <div class="panel panel-default">
                <div class="wrapper-md">
                    <h1 class="h2 m-t-none m-b-sm font-thin">{{::data.sc_cat_item.name}}</h1>
                    <!-- Remove duplicate short description since same as name-->
                    <div class="text-muted">{{::data.sc_cat_item.short_description}}</div>
                </div>
                <div class="wrapper-md b-t" ng-if="::data.sc_cat_item.description">
                    <div ng-bind-html="::data.sc_cat_item.description"></div>
                </div>
                <div class="wrapper-md b-t" ng-if="::data.sc_cat_item.sys_class_name == 'pc_software_cat_item'">
                    <div ng-if="::data.pc_software_cat_item.specs">
                        <p><h3>Specifications</h3></p>
                        Vendor: {{::data.pc_software_cat_item.vendor}}<br>
                        Available for home use: {{::data.pc_software_cat_item.u_available_for_home_use}}
                        <div ng-bind-html="::data.pc_software_cat_item.specs"></div>
                    </div>
                    <div ng-if="::data.pc_software_cat_item.features">
                        <p><h3>Features</h3></p>
                        <div ng-bind-html="::data.pc_software_cat_item.features"></div>
                    </div>
                    <div ng-if="::data.pc_software_cat_item.u_technical_support">
                        <p><h3>Technical Support</h3></p>
                        <div ng-bind-html="::data.pc_software_cat_item.u_technical_support"></div>
                    </div>
                    <div ng-if="::data.pc_software_cat_item.u_system_requirements">
                        <p><h3>System Requirements</h3></p>
                        <div ng-bind-html="::data.pc_software_cat_item.u_system_requirements"></div>
                    </div>
                </div>
                <div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md"><a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>{{::data.sc_cat_item.url}} ➚</a></div>
                <div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md"><a ng-href="?id=kb_article&sys_id={{::data.sc_cat_item.kb_article}}">${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}</a></div>
                <div ng-if="::data.sc_cat_item._fields">
                    <sp-cat-item item="::data.sc_cat_item" />
                    <form>
                        <div ng-class="{'b-t wrapper-md': data.sc_cat_item._view.length}">
                            <!-- display view and model -->
                            <sp-model form-model="::data.sc_cat_item" mandatory="mandatory"></sp-model>
                        </div>
                        <div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'" class="b-t wrapper-md">
                            <div class="m-b" ng-if="data.showPrices && (data.sc_cat_item.price || data.sc_cat_item.recurring_price)">
                                <div ng-if="data.sc_cat_item.price" class="h4 cat_item_price">${Price}: {{data.sc_cat_item.price}}</div>
                                <em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price">${Recurring Price}: {{data.sc_cat_item.recurring_price}}</em>
                            </div>
                            <now-attachments-list template="sp_attachment_single_line"></now-attachments-list>
                            <span ng-if="::c.allowOrder()">
                                <select ng-if="c.showQuantitySelector()"
                                        ng-disabled="submitted"
                                        class="form-control quantity-selector"
                                        ng-model="c.quantity"
                                        aria-label="${Quantity}"
                                        ng-options="num for num in [1,2,3,4,5,6,7,8,9,10]"></select>
                                <label ng-if="!submitted" style="float:right;font-weight:normal;cursor:pointer;"><sp-attachment-button></sp-attachment-button><span style="padding-left:4px;">${Add attachments}</span></label>
                                <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="submitted" ng-click="triggerOnSubmit()" class="btn btn-primary">{{submitButtonMsg}}</button>
                                <button tabindex="0" ng-if="c.showAddCartBtn()" name="submit" ng-disabled="submitted" ng-click="triggerAddToCart()" class="btn btn-default">${Add to Cart}</button>
                                <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
                            </span>
                            <div ng-if="hasMandatory(mandatory)" class="alert alert-info" style="margin-top: .5em">
                                <span ng-if="hasMandatory(mandatory)">${Required information} </span>
                                <span ng-repeat="f in mandatory" class="label label-danger" style="margin-right: .5em; display: inline-block;">{{::f.label}}</span>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <sp-message-dialog name="delete_attachment"
                       title="{{m.dialogTitle}}"
                       message="{{m.dialogMessage}}"
                       ok="{{m.dialogOK}}"
                       cancel="{{m.dialogCancel}}"
                       dialog-class="delete-dialog"></sp-message-dialog>

    <div ng-if="::!data.sc_cat_item">
        <div class="panel panel-default">
            <div class="panel-heading"><h4 class="panel-title">${Item not found}</h4></div>
            <div class="panel-body wrapper">
                <p>${This item is not found or currently not available}</p>
                <p>${Suggestions}:</p>
                <ul>
                    <li>${Try searching for the item}</li>
                    <li>${Go to the Service Catalog homepage}</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="sr-only" aria-live="assertive">{{c.status}}</div>
</div>]]></template>
    </sp_widget>
</record_update>
