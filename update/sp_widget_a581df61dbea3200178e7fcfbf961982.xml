<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function ($scope, $location, spUtil, amb, $http, $rootScope, $timeout) {
	var c = this;
	/*
	 * options:
	 * hide_footer (bool) = true to remove the data table footer contents
	 * hide_header (bool) = true to remove the data table header contents
	 * show_new (bool) = true to show the "New" record button
	 * show_keywords (bool) = true to show the keyword search field
	 * table (string) = the table name to query
	 * filter (string) = the encoded query
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	 * fields (string) = comma seperated list of fields that become the list columns
	 * view (string) = the default view to load for columns, overrides fields
	*/

	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
	var keys = ['table', 'filter', 'p', 'o', 'd'];

	var eventNames = {
		click: 'data_table.click',
		setFilter: 'data_table.setFilter',
		setKeywords: 'data_table.setKeywords'
	};
	
	c.active = "true";
	
	//Listening for "showHideWidget" event
	$rootScope.$on('showHideWidget', function(event,data,state) {
		c.selectedStuff = data;
		$scope.data.title = data;
		setTable(data);
		setFilter(state,data);
	  });
	
	//Listening for "showActive" event
  $rootScope.$on('showActive', function(event,data,state){
  // change filter
	setFilter(state, c.selectedStuff);
	});
	
	//Listening for "showInactive" event
  $rootScope.$on('showInactive', function(event,data,state){
  // change filter
	setFilter(state, c.selectedStuff);
	});

	$scope.go = function(table, item) {
		var parms = {};
		parms.table = table;
		parms.sys_id = item.sys_id;
		parms.record = item;
		$scope.ignoreLocationChange = true;
		for (var x in c.data.list) {
			c.data.list[x].selected = false;
		}
		item.selected = true;
		$scope.$emit(eventNames.click, parms);
	};

	$scope.newRecord = function(){
		var parms = {
			id: 'form',
			table: $scope.data.table,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

	$location.search(parms);
	};

	function recoverStateFromUrl() {
		$scope.data.fields = [];
		var s = $location.search();
		for (var x in keys) {
			if (s[keys[x]]) {
				$scope.data[keys[x]] = s[keys[x]];
			}
		}
		$scope.server.update().then(function(data) {
			if (s.sys_id) {
				for (var x in data.list) {
					if (data.list[x].sys_id == s.sys_id) {
						$scope.go(s.table, data.list[x]);
					}
				}
			}
		});
	}
	
	if ($scope.options.fromUrl) {		
		$scope.$on('$locationChangeSuccess', function(e) {
		if ($scope.ignoreLocationChange){
			$scope.ignoreLocationChange = false;
			return;
		}

	// Helps to recover state when using the browser's back button
	recoverStateFromUrl();
	});		
	}

	
	$scope.getNumber = function(num) {
		return new Array(num);
	}

	$scope.mathMin = function(v1,v2) {
		return Math.min(v1,v2);
	}

	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)				
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

	if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
		$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data);

	initRecordWatcher(f.table, f.filter);
	});
	}

	function setPermalink(table, filter, orderBy, orderDirection, page){
		$scope.ignoreLocationChange = true;
		var search = $location.search();
		angular.extend(search, {
			spa: 1,
			table: table,
			filter: filter,
			p: page,
			o: orderBy,
			d: orderDirection
		});
		$location.search(search);
	}

	var watcher;
	function initRecordWatcher(table, filter){
		if (watcher)
			watcher.unsubscribe();

	if (table && filter) {
		var watcherChannel = amb.getChannelRW(table, filter);
		amb.connect();
		watcher = watcherChannel.subscribe(function() {
			spUtil.update($scope)
		});
	}
	}

	$scope.setPageNum = function(num) {
		$scope.data.p = num;
		getData(true);
		c.data.clickedP = true;
	}

	$scope.setOrderBy = function(field) {
		var d = "asc";
		if ($scope.data.o == field) {
			if ($scope.data.d == "asc")
				d = "desc";
			else
				d = "asc";
		}
		$scope.data.o = field;
		$scope.data.d = d;
		$scope.setSearch(true);
	}

	$scope.setSearch = function(updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	}

	$scope.$on(eventNames.setFilter, function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(false);
	});

	$scope.$on(eventNames.setKeywords, function(e, keywords){
		$scope.data.keywords = keywords;
		$scope.setSearch(false);
	});

	$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
		$scope.data.filter = newFilter;
		$scope.setSearch(true);
	});

	$scope.rowsWerePruned = function() {
		if (!$scope.data.list)
			return;
		
		$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
		return $scope.rowsPruned > 0;
	}

	$scope.showFilter = function() {
		return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
	}
	
	c.appendQuery = function(query){
		if ($scope.data.filter.length > 1)
			$scope.data.filter += '^';
		$scope.data.filter += query;
			$scope.setSearch();
		
	}

	// Makes Widget Async
	var title = $scope.data.title;
	if ($scope.options.use_instance_title == 'true')
		title = $scope.options.title;
	$scope.data = $scope.options;
	$scope.loadingData = true;
	$scope.server.update().then(function() {
		$scope.loadingData = false;
		$scope.data.title = title;
		initRecordWatcher($scope.data.table, $scope.data.filter);
	});
	
	function parseQuery(table, queryString){
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
			return response.data.result;
		});
	}
	
	c.createQueryTerm = function(table, field, sys_id, operator){
		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function(response){
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	}
	
	c.showMatching = function(field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function(oldTerms) {
			for(var i=0; i<oldTerms.length; i++){
				var term = oldTerms[i];
				if (isSameField(newTerm, term))
					continue;
				
				if (eq.length)
					eq += '^';
				
				eq += getEncodedTerm(term);
			}
			if (eq.length)
				eq += '^';
			eq += getEncodedTerm(newTerm);
			
			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};
	
	c.filterOut = function(field, newTerm) {
		var eq = $scope.data.filter;
		if (eq.length)
			eq += '^';
		
		eq += getEncodedTerm(newTerm);
		$scope.data.filter = eq;
		$scope.setSearch();
	};
	
	function isSameField(t1, t2) {
		if ('left' in t1 && 'left' in t2)
			return t1.left.field === t2.left.field;
		else if ('left' in t1)
			return t1.left.field === t2.field;
		else if ('left' in t2)
			return t1.field === t2.left.field;
		return t1.field === t2.field;
	}
		
	function getEncodedTerm(term) {
		var eq;
		if (term.left) {
			eq = getEncodedTerm(term.left);
			eq += '^OR';
			eq += getEncodedTerm(term.right);
		} else {
			eq = term.field;
			eq += term.operator;
			eq += term.value;
		}
		return eq;
	}
	
	function setFilter(state, data) {
		if(state == "open") {
			if(data == "My Incidents") {
				c.data.newFilter = "caller_idDYNAMICjavascript:gs.getUserID()^active=true";
			} else if(data == "My Requests") {
				c.data.newFilter = "active=true^requested_forDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Request Items") {
				//c.data.newFilter = "active=true^stage!=complete^state=1^ORstate=2^u_primary_contactDYNAMICjavascript:gs.getUserID()^NQactive=true^stage!=complete^state=1^ORstate=2^u_task_requested_forDYNAMICjavascript:gs.getUserID()^NQactive=true^stage!=complete^state=1^ORstate=2^opened_byDYNAMICjavascript:gs.getUserID()";
				c.data.newFilter = "active=true^stage!=complete^state=1^ORstate=2^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^NQactive=true^stage!=complete^state=1^ORstate=2^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^NQactive=true^stage!=complete^state=1^ORstate=2^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe"; //for demo
				//c.data.newFilter = "active=true^stage!=complete^u_primary_contactDYNAMICjavascript:gs.getUserID()^ORu_task_requested_forDYNAMICjavascript:gs.getUserID()^ORopened_byDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Approvals") {
				c.data.newFilter = "approver=javascript:getMyApprovals()^state=requested";
			} else if(data == "My Contracts") {
				c.data.newFilter = "contract_administratorDYNAMICjavascript:gs.getUserID()^stateINdraft,active";
			} else if(data == "My Watched Incidents") {
				c.data.newFilter = "active=true^watch_listLIKEjavascript:gs.getUserID()^NQactive=true^watch_listLIKEjavascript:(new global. ScopedGlideUser()).getEmail()";
			} else if(data == "My Facilities Requests") {
				c.data.newFilter = "active=true^caller_idDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Software Commitments") {
				c.data.newFilter = "u_active=true^u_userDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Assets") {
				c.data.newFilter = "assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Tasks") {
				c.data.newFilter = "active=true^assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Change Requests") {
				c.data.newFilter = "requested_byDYNAMICjavascript:gs.getUserID()^active=true^NQactive=true^assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Category Requests") {
				c.data.newFilter = "state=requested^managerDYNAMICjavascript:gs.getUserID()"
			}
			c.active = "true";
		}
		else if(state == "closed") {
			if(data == "My Incidents") {
				c.data.newFilter = "caller_idDYNAMICjavascript:gs.getUserID()^active=false";
			} else if(data == "My Requests") {
				c.data.newFilter = "active=false^requested_forDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Request Items") {
				//c.data.newFilter = "state=3^ORstate=4^ORstate=7^u_primary_contactDYNAMICjavascript:gs.getUserID()^ORu_task_requested_forDYNAMICjavascript:gs.getUserID()^ORopened_byDYNAMICjavascript:gs.getUserID()";
				//c.data.newFilter = "state=3^ORstate=4^ORstate=7^u_primary_contactDYNAMICjavascript:gs.getUserID()^NQstate=3^ORstate=4^ORstate=7^u_task_requested_forDYNAMICjavascript:gs.getUserID()^NQstate=3^ORstate=4^ORstate=7^opened_byDYNAMICjavascript:gs.getUserID()";
				c.data.newFilter = "state=3^ORstate=4^ORstate=7^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^NQstate=3^ORstate=4^ORstate=7^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe^NQstate=3^ORstate=4^ORstate=7^request.requested_forDYNAMIC90d1921e5f510100a9ad2572f2b477fe"; //for demo
			} else if(data == "My Approvals") {
				c.data.newFilter = "approver=javascript:getMyApprovals()^state!=requested";
			} else if(data == "My Contracts") {
				c.data.newFilter = "contract_administratorDYNAMICjavascript:gs.getUserID()^stateNOT INdraft,active";
			} else if(data == "My Watched Incidents") {
		c.data.newFilter = "watch_listLIKEjavascript:gs.getUserID()^active=false^NQactive=false^watch_listLIKEjavascript:(new global. ScopedGlideUser()).getEmail()";
			} else if(data == "My Facilities Requests") {
				c.data.newFilter = "active=false^caller_idDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Software Commitments") {
				c.data.newFilter = "u_active=false^u_userDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Assets") {
				c.data.newFilter = "assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Tasks") {
				c.data.newFilter = "active=false^assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Change Requests") {
				c.data.newFilter = "requested_byDYNAMICjavascript:gs.getUserID()^active=false^NQactive=false^assigned_toDYNAMICjavascript:gs.getUserID()";
			} else if(data == "My Category Requests") {
				c.data.newFilter = "state!=requested^managerDYNAMICjavascript:gs.getUserID()";
			}
			c.active = "false";
		}
		c.data.selectedStuff = data;
		$scope.loadingData = true;
		c.server.update().then(function(data) {
					$scope.loadingData = false;
		});
	}
	
	function setTable(selected) {
		if(selected == "My Incidents") {
			c.data.newTable = "incident";
		} else if(selected == "My Requests") {
			c.data.newTable = "sc_request";
		} else if(selected == "My Request Items") {
			c.data.newTable = "sc_req_item";
		} else if(selected == "My Approvals") {
			c.data.newTable = "sys_approval";
		} else if(selected == "My Contracts") {
			c.data.newTable = "ast_contract";
		} else if(selected == "My Watched Incidents") {
			c.data.newTable = "incident";
		} else if(selected == "My Facilities Requests") {
			c.data.newTable = "facilities";
		} else if(selected == "My Software Commitments") {
			c.data.newTable = "u_sft_commitment";
		} else if(selected == "My Assets") {
			c.data.newTable = "alm_hardware";
		} else if(selected == "My Tasks") {
			c.data.newTable = "sc_task";
		} else if(selected == "My Change Requests") {
			c.data.newTable = "change_request";
		} else if(selected == "My Category Requests") {
			c.data.newTable = "sc_ic_category_request";
		}
	}
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-heading {
  padding-left: 8px;
}

thead {
  border-bottom: 1px solid #ddd;
}

table {
  margin-bottom: 0;
}

.table &gt; thead &gt; tr &gt; th {
  border: 1px solid #ddd;
  cursor: pointer;
  vertical-align: middle;
  
  &amp;:first-child {
    border-left: none;
  }
  
  &amp;:last-child {
    border-right: none;
  }
}

th i {
  display: inline-block;
  margin-left: 5px;
  color: #A0A0A0;
}

th .disabled{
  color:#ddd;
}

.th-title {
  display: inline-block;
  color: #428bca;
}

.panel-body {
  overflow: auto;
  padding: 0px;
}


.selected {
  color: #fff;
  background-color: #909090;
  border-color: 1px solid #fff;
}

tbody tr:last-child {
  border-bottom: none;
}

.pruned-msg {
  padding-bottom: 10px; 
  padding-left: 4px; 
  text-align: center;
}

.pruned-msg-filter-pad {
  padding-top:8px; 
}

.filter-breadcrumbs {
  border-bottom: 1px solid #ddd;
  padding-top: 3px;
}

.home-search {
	.form-control {
    border: 1;
    border-radius: 0;
    display: block;
    width: 100%;
    height: 36px;
    font-size: 14px;
    box-shadow: none;
  }
  .input-group-btn {
    background-color: #fff;
  }
  .btn {
 		width: auto;
  	height: auto;
    border: 1;
    &amp;:hover {
      border-radius: 0;
    }
	}
  .sp-tagline-color {
	color: $sp-tagline-color;
  }
}

.warning {
  color: #ff0000;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data>{"data":
	{
		"table": "incident",
		"view": "default",
		"o": "opened_at",
		"d": "desc",
		"filter": "activeEQtrue",
		"p": 1,
		"fields": "number,short_description"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list>title,maximum_entries,glyph,color,sp_page,field_list,table,filter,order,order_by,order_direction</field_list>
        <has_preview>false</has_preview>
        <id>ucd-data-table</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	var $ul, $contextMenu;
	element.on('contextmenu', function(e){
		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;

		// Context Menu for tbody
		if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){
			e.preventDefault();
			field = rowScope.field;
			item = rowScope.item;
			fieldVal = item[field].value;
			
			var items = [
				['${Show Matching}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
						ctrl.showMatching(field, term);
					});
				}],
				['${Filter Out}', function(){
					ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
						ctrl.filterOut(field, term);
					});
				}]
			];

			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});

	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});

		$contextMenu.on('click', function (e) {
			if ($(e.target).hasClass('dropdown')) {
				_clearContextMenus(event);
			}
		});
		$contextMenu.on('contextmenu', function (event) {
			event.preventDefault();
			_clearContextMenus(event);
		});

		$contextMenu.css({
			position: 'absolute',
			top: 0,
			height: scrollHeight,
			left: 0,
			right: 0,
			zIndex: 9999
		});

		$('body').append($contextMenu);

		$ul = angular.element('<ul>', {
			'class': 'dropdown-menu',
			'role': 'menu'
		});
		renderItems();
		$contextMenu.append($ul);

		function renderItems(){
			angular.forEach(items, function (item) {
				var $li = angular.element('<li>');

				if (item === null) {
					$li.addClass('divider');
				} else {
					var $a = angular.element('<a>');
					$a.attr({tabindex: '-1', href:'#'});
					$a.text(item[0]);
					$li.append($a);
					$li.on('click', function (e) {
						e.preventDefault();
						scope.$apply(function () {
							_clearContextMenus(e);
							item[1].call(item, item);
						});
					});
				}

				$ul.append($li);
			});
		}
	}

	function _clearContextMenus(event){
		if (!event){
			return;
		}

		angular.element(event.currentTarget).removeClass('context');

		var els = angular.element(".context-dropdown");
		angular.forEach(els, function(el){
			angular.element(el).remove();
		});
	}

	var contextMenuItemHeight = 0;
	function setContextMenuPosition(event){
		if (contextMenuItemHeight === 0)
			contextMenuItemHeight = $ul.children(0).height();

		// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
		// that can cause IE10 to take 200ms to render a context menu.
		var cmWidth = 150;
		var cmHeight = contextMenuItemHeight * $ul.children().length;
		var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
		var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;

		$ul.css({
			display: 'block',
			position: 'absolute',
			left: startX,
			top: startY,
			'min-width': cmWidth
		});
	}
}]]></link>
        <name>ucd_Data Table</name>
        <option_schema/>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[(function() {
	if (!input) // asynch load list
		return;

	data.title = options.title || input.title;

	/*
	 * data.table = the table
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction
	 * data.keywords = the keyword search term
	 * data.list = the table data as an array
	 * data.invalid_table = true if table is invalid or if data was not succesfully fetched
	 * data.table_label = the table's display name. e.g. Incident
	 * data.table_plural = the table's plural display name. e.g. Incidents
	 * data.fields = a comma delimited list of field names to show in the data table
	 * data.column_labels = a map of field name -> display name
	 * data.window_size = the number of rows to show
	 * data.filter = the encoded query
	 */
	// copy to data[name] from input[name] || option[name]
	optCopy(['table', 'p', 'o', 'd', 'filter', 'fields', 'keywords', 'view']);
	optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id']);
	if (!data.table) {
		data.invalid_table = true;
		data.table_label = "";
		return;
	}

	if (!data.fields) {
		if (data.view)
			data.fields = $sp.getListColumns(data.table, data.view);
		else
			data.fields = $sp.getListColumns(data.table);
	}

	data.view = data.view || 'mobile';
	
	if(input && input.selectedStuff) {
		var inputStr = input.selectedStuff;
		var stuffStr = inputStr.replace("My", "");
		data.searchTerm = "Search" + stuffStr;
	}
	
	if(input && input.newTable) {
		data.table = input.newTable; 
	} else {
		data.table = data.table || $sp.getValue('table');
	}
	
	//This
	switch(data.table) {	
		case 'incident':
			data.fields = 'number,short_description,state,sys_created_on,sys_updated_on';
			break;
		case 'facilities':
			data.fields = 'number,short_description,state,sys_created_on,sys_updated_on';
			break;
		case 'change_request':
			data.fields = 'number,short_description,state,type,sys_updated_on';
			break;
		case 'ast_contract':
			data.fields = 'number,short_description,starts,state,ends,vendor,expiration';
			break;
		case 'alm_hardware':
			data.fields = 'serial_number,display_name,model.type';
			break;
		case 'sc_req_item':
			data.fields = 'number,short_description,stage,sys_created_on,sys_updated_on';
			break;
		case 'u_sft_commitment':
			data.fields = 'u_number,u_sft_commitment,u_amount,sys_created_on';
			break;
		case 'sc_ic_category_request':
			data.fields = 'number,title,state';
			break;
	}

	data.filter = data.filter || $sp.getValue('filter');
	data.keywords = data.keywords || $sp.getValue('keywords');
	data.p = data.p || $sp.getValue('p') || 1;
	data.p = parseInt(data.p);
	data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by');
	data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction');
	data.window_size = data.window_size || $sp.getValue('maximum_entries') || 20;
	data.page_index = data.p - 1;
	data.show_new = data.show_new || options.show_new;
	
	var gr;
	if (gs.getProperty("glide.security.ui.filter") == "true") {
		gr = new FilteredGlideRecord(data.table);
		gr.applyRowSecurity();
	} else
		gr = new GlideRecordSecure(data.table);
	if (!gr.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}

  data.canCreate = gr.canCreate();
	data.table_label = gr.getLabel();
	data.table_plural = gr.getED().getPlural();
	
	if (input && input.newFilter) {
		gr.addEncodedQuery(input.newFilter);
	} else if (data.filter) {
		gr.addEncodedQuery(data.filter);
	}

	if (data.keywords){
		gr.addQuery('123TEXTQUERY321', data.keywords);
		data.keywords = null;
	}

	data.filter = gr.getEncodedQuery();

	if (data.relationship_id) {
		var rel = GlideRelationship.get(data.relationship_id);
		var target = new GlideRecord(data.table);
		var applyTo = new GlideRecord(data.apply_to);
		applyTo.get("sys_id", data.apply_to_sys_id);
		rel.queryWith(applyTo, target); // put the relationship query into target
		gr.addEncodedQuery(target.getEncodedQuery()); // get the query the relationship made for us
	}

	if (data.o){
		if (data.d == "asc")
			gr.orderBy(data.o);
		else
			gr.orderByDesc(data.o);
	} else {
		// default to order by last updated on
		gr.orderByDesc('sys_updated_on');
	}

	
	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;
	gr.chooseWindow(data.window_start, data.window_end);
	gr._query();

	data.row_count = gr.getRowCount();
	data.num_pages = Math.ceil(data.row_count / data.window_size);
	
	/*
	E.g. Rows 41 - 21 of 21
	if window start is > number of records (row_count), set page to 1
	*/
	if(data.window_start > data.row_count) {
		data.page_index = 0;
		data.p=1;
		data.window_start=0;
		data.window_end=(data.page_index+1)*data.window_size;
		
		// requery
		gr.chooseWindow(data.window_start, data.window_end);
		gr.orderByDesc('sys_updated_on');
		gr._query();
		// recalculate
		data.row_count = gr.getRowCount();
		data.num_pages = Math.ceil(data.row_count / data.window_size);
	}
	
	data.column_labels = {};
	data.fields_array = data.fields.split(',');
	
	// use GlideRecord to get field labels vs. GlideRecordSecure
	var grForLabels = new GlideRecord(data.table);
	for (var i in data.fields_array) {
		var field = data.fields_array[i];
		var ge = grForLabels.getElement(field);
		if(ge == null) {
			continue;
		}
    
		try {
			data.column_labels[field] = ge.getLabel();
		} catch(e) {
			console.log("Error for field: " + field + " does not exist in " + data.table);
		}
	}

	data.list = [];
	while (gr._next()) {
		var record = {};
		$sp.getRecordElements(record, gr, data.fields);
		
		// get record's workflow activity state
		/*var wf = new GlideRecord('wf_context');  
		wf.addQuery('id', gr.sys_id); //  sc_req_item sys_id  
		wf.query();  
		if (wf.next()){  
			var act = new GlideRecord('wf_history');  
			act.addQuery('context', wf.sys_id);  
			act.query();  
			if (act.next()){  
				var activity = act.activity.name;
				var stage = act.activity.stage;
			}
		}*/
		
		/*if (gr instanceof FilteredGlideRecord) {
			// FilteredGlideRecord doesn't do field-level
			// security, so take care of that here
			for (var f in data.fields_array) { 
				var fld = data.fields_array[f];
				if (!gr.isValidField(fld))
					continue;
				
				if (!gr[fld].canRead()) {
					record[fld].value = null;
					record[fld].display_value = null;
				}
			}
		}*/
		record.sys_id = gr.getValue('sys_id');
		data.list.push(record);
	}
		
	//var breadcrumbWidgetParams = { table: data.table, query: data.filter };
	//data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);

	// copy to data from input or options
	function optCopy(names) {
		names.forEach(function(name) {
			data[name] = input[name] || options[name];
		})
	}

})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>aztan</sys_created_by>
        <sys_created_on>2017-05-05 19:45:58</sys_created_on>
        <sys_id>a581df61dbea3200178e7fcfbf961982</sys_id>
        <sys_mod_count>322</sys_mod_count>
        <sys_name>ucd_Data Table</sys_name>
        <sys_package display_value="UCD Portal Demo" source="x_uocd2_ucd_portal">c2fa136f139176003527bd122244b0f5</sys_package>
        <sys_policy/>
        <sys_scope display_value="UCD Portal Demo">c2fa136f139176003527bd122244b0f5</sys_scope>
        <sys_update_name>sp_widget_a581df61dbea3200178e7fcfbf961982</sys_update_name>
        <sys_updated_by>admin-eduque</sys_updated_by>
        <sys_updated_on>2018-08-06 18:46:25</sys_updated_on>
        <template><![CDATA[<div class="panel o-box">
    <section class="u-space-bottom">
        <div class="o-media ">
            <div class="o-media__figure">
                <img src="MyStuff.png" width="40" height="40" />
            </div>
            <div class="o-media__body">
                <section class="u-space-bottom">
                    <h2><span class="heading--weighted--weighted" style="color: #f7921e; font-size: 3rem;">My Stuff</span></h2>
                </section>
                <h2>Check the status of your stuff</h2>
                <p><i>This is the central repository of your incidents, your assets (i.e. your work computer info), and your requests. Sort your items by selecting from the Filter column on the right.</i></p>
              <p class="warning"><i>Never enter confidential information such as passwords or social security numbers in any tickets.</i></p>
            </div>
        </div>
    </section>
    <div class="inline-form">
        <!-- Dropdown menu -->
        <span class="dropdown m-r-xs">
            <button class="sp-ui-header__menu" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                <i class="fa fa-bars" aria-hidden="true"></i>
            </button>
            <ul class="dropdown-menu" aria-labelledby="optionsMenu">
                <li ng-repeat="t in ::exportTypes">
                    <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}" target="_new">${Export as} {{::t.label}}</a>
                </li>
            </ul>
        </span>
        <!-- Title of table -->
        <span class="panel__title">{{data.title || data.table_plural}}</span>
        <!-- Search
          <div class="sp-ui-header__search search-form--bordered">
            <form ng-submit="setSearch(true)" action="#" method="post" class="inline-form search-form">
                      <label for="search-field" class="u-hidden--visually">Search</label>
                      <input type="input" ng-model="data.keywords" placeholder="{{data.searchTerm}}" id="search-field" class="search-form__input " name="datatable-search" value="">
                      <input type="image" class="search-form__submit" name="search" alt="Search">
                          </form>
              </div>    -->
        <div class="col-lg-4 col-md-4 col-xs-4" style="float: right" ng-if="options.show_keywords">
            <form ng-submit="setSearch(true)">
                <div class="input-group home-search">
                    <input type="text" name="datatable-search" ng-model="data.keywords" class="form-control" placeholder="{{data.searchTerm}}">
                    <span class="input-group-btn">
                        <button name="search" class="btn btn-default" type="submit"><span class="glyphicon glyphicon-search home-search"></span></button>
                    </span>
                </div>
            </form>
        </div>
    </div>
    <!-- Data Table -->
    <section>
        <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
            ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
        </div>
        <div class="alert alert-info" ng-if="loadingData">
            <fa name="spinner" spin="true"></fa> ${Loading data}...
        </div>
        <!-- Table -->
        <table class="table table-striped table-responsive ng-scope" ng-if="data.list.length">
            <thead>
                <tr>
                    <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)">
                        <div class="th-title ng-binding">
                        <!-- Make Stage appear as State -->
                        <div ng-switch on="data.column_labels[field]">
                        	<div ng-switch-when="Workflow State">State</div>
                        	<div ng-switch-default>{{data.column_labels[field]}}</div>
                        </div> 
                        <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]"></i></div>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr ng-repeat="item in data.list track by item.sys_id" class="ng-scope">
                    <td class="pointer ng-binding ng-scope"
                        ng-class="{selected: item.selected}"
                        ng-click="go(data.table, item)"
                        ng-repeat="field in data.fields_array"
                        data-field="{{field}}"
                        data-th="{{data.column_labels[field]}}">
                        {{item[field].display_value}}
                    </td>
                </tr>
            </tbody>
        </table>
        <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
            <span ng-if="rowsPruned == 1">
                ${{{
rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
     <!-- footer -->
      <span class="u-space-right" ng-hide="options.hide_footer" ng-if="data.row_count">
        <div class="btn-group">
          <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn--alt"><i class="fa fa-chevron-left"></i></a>
        </div>
        <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
          <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn--alt">{{$index + 1}}</a>
        </div>
        <div class="btn-group">
          <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn--alt"><i class="fa fa-chevron-right"></i></a>
        </div>
      	${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count
                }}}
            </span>
    </section>
</div>


<!-- without styling
<div>
  <div class="panel panel-{{options.color}} b">
    <div class="panel-heading form-inline" ng-hide="options.hide_header">
      <span class="dropdown m-r-xs">
        <span class="dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true"></span>
        <ul class="dropdown-menu" aria-labelledby="optionsMenu">
          <li ng-repeat="t in ::exportTypes">
            <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}" target="_new">${Export as} {{::t.label}}</a>
          </li>
        </ul>
      </span>
      <span class="panel-title"><i ng-if="options.glyph" class="fa fa-{{options.glyph}} m-r"></i>{{data.title || data.table_plural}}</span>
      <div class="pull-right" ng-if="options.show_keywords">
    <form ng-submit="setSearch(true)">
        <div class="input-group home-search">
          <input type="text" name="datatable-search" ng-model="data.keywords" class="form-control" placeholder="{{data.searchTerm}}">
          <span class="input-group-btn">
            <button name="search" class="btn btn-default" type="submit"><span class="glyphicon glyphicon-search home-search"></span></button>
          </span>
        </div>
        </form>
      </div>
      <div class="clearfix"></div>
    </div>
    <!-- body
    <div class="panel-body">
      <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
        ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
      </div>
      <div class="alert alert-info" ng-if="loadingData">
          <fa name="spinner" spin="true"></fa> ${Loading data}...
       </div>
      <table class="table table-striped table-responsive" ng-if="data.list.length">
        <thead>
          <tr>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)">
              <div class="th-title">{{data.column_labels[field]}}</div>
              <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]"></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="item in data.list track by item.sys_id">
            <td class="pointer" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in data.fields_array" data-field="{{field}}" data-th="{{data.column_labels[field]}}">{{item[field].display_value}}</td>
          </tr>
        </tbody>
      </table>
      <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
        <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
        <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
      </div>
    </div>
    <!-- footer
    <div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
      <div class="btn-toolbar m-r pull-left">
        <div class="btn-group">
          <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"><i class="fa fa-chevron-left"></i></a>
        </div>
        <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
          <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default">{{$index + 1}}</a>
        </div>
        <div class="btn-group">
          <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default"><i class="fa fa-chevron-right"></i></a>
        </div>
      </div>
      <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>

      <span class="clearfix"></span>
    </div>
  </div>
</div>-->
]]></template>
    </sp_widget>
</record_update>
